/* 
    js是门编程语言（具备编程思想）
    [面向对象]  JAVA\JS\PHP\C#\C++\Ruby\Python……
    [面向过程]  C
    
    面向对象编程，需要我们掌握："对象、类、实例"的概念
    对象： 万物皆对象(所有我们去操作去认知的东西都是对象)
    类：对象的具体细分(按照功能特点分类：大类、小类)
    实例：类中具体的一个事物(拿出类别中的一个实例进行研究，那么
        当前类别的其他实例也具备这些特点特征)
    JS是基于面向对象设计开发的语言，我们学习与实践也要按照面向对象的思想去体会和理解

    Object 对象类（基类)
        Number：0 NaN 1.3 ……都是数字类的实例
        String
        Boolean
        Null
        Undefined
        Array：每一个数组都是Array类的实例
        RegExp
        Function
        Date
        HTMLCollection：每一个元素都是它的实例
        NodeLists
        EventTarget
            WindowProperties
                Window
                    window(小写)就是Window(大写)的实例
            Node
            Element
            HTMLElement
            HTMLBodyElement
                div
                ……
            HTMLDIivElement
            ……
        ……
    基于基类，我们可以创建很多自己的类(自定义类)
    => 基于js进行开发我们基本上都是基于类基于实例来完成的，所以我们操作js就是在面向对象编程
*/

/* 
    基于构造函数创建自定义类(constructor)
    1、在普通函数执行的基础上new xxx(),这样就不是普通函数执行了，而是构造函数执行，
    当前的函数名称为"类名"，接收的返回结果是当前类的一个实例
    2、创建类名最好首字母大写
    3、构造函数模式执行，主要用于组件、类库、插件、框架等的封装
*/

// 构造函数模式
function Fn() {}
var f = new Fn(); // f是Fn类的一个实例
var f2 = new Fn(); // f2也是Fn类的一个实例s,f和f2是独立分开互不影响的

// 单例模式
var obj1 = {}; // obj1是Object的一个实例
var obj2 = {}; // obj2是Object的一个实例

/*
    =>js中创建值有两种方式
    1、字面量表达式
    2、构造函数模式
    var obj = {};
    var obj = new Object();
    不管是哪一种方式创建出来的都是Object类的实例，而实例之间是
    独立分开的,所有var xxx = {} 这种模式就是JS中的单例模式
    
    =>基本数据类型基于两种不同的模式创建出来得值是不一样的
    基于字面量方式创建出来的值是基本类型值
    基于构造函数创建出来的值是引用类型
    var num1 = 12;  //  typeof num1 === 'number'
    var num2 = new Number(12); //  typeof num1 === 'object'
    num1和num2都是数字类的实例，都可以使用数字类提供的属性和方法，num1只是js表达数字的方式之一
*/

/* 
    封装：低耦合高内聚
    多态：重载和重写
        重载：方法名相同，形参个数或者类型不一样(js中不存在真正意义上的重载，js中重载指的是
            同一个方法，根据传参不同，实现出不同效果)
        重写：在类的继承中，子类可以重写父类中的方法

*/

/* 
    什么是面向对象？
        面向对象是一种编程思想，js本身就是基于面向对象构建出来的（例：js中有很多内置类，像Promise就是ES6中
        新增的一个内置类，我们可以基于new Promise来创建一个实例，来管理异步编程，在项目中经常用promise，
        自己也研究过它的源码……），我之前看过一点框架源码，平时用的vue/react/jq也是基于面向对象构建出来的，
        他们都是类，平时开发的时候都是创建他们的实例来操作的。当然我自己在真实项目中，也封装过一些组件插件，
        （小程序时间组件、请求拦截器、定时器管理……）也是基于面向对象开发，创造不同的实例，来管理私有的属性
        和公有的方法，很方便……
        
        js中的面向对象，和其他编程语言还是略微不同的，js中类和实例是基于原型和原型链机制来处理的，而且js中
        关与类的重载、重写、继承也和其他语言不太一样……

*/
